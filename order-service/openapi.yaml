openapi: 3.0.0
info:
  title: Order Service API
  version: 1.0.0
  description: API for managing orders in the e-commerce platform.
servers:
  - url: https://api.example.com/v1
    description: Production server
paths:
  /orders:
    get:
      summary: List all orders
      description: Retrieve a list of all orders with optional filtering and pagination.
      parameters:
        - name: status
          in: query
          description: Filter orders by status (e.g., PENDING, PROCESSING, SHIPPED, DELIVERED, CANCELLED).
          schema:
            type: string
            enum: [PENDING, PROCESSING, SHIPPED, DELIVERED, CANCELLED]
        - name: limit
          in: query
          description: Limit the number of orders returned (default is 10).
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          description: Offset for pagination (default is 0).
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: A list of orders.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new order
      description: Create a new order with the provided details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreateRequest'
      responses:
        '201':
          description: Order created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /orders/{orderId}:
    get:
      summary: Get an order by ID
      description: Retrieve detailed information about a specific order.
      parameters:
        - name: orderId
          in: path
          required: true
          description: The ID of the order to retrieve.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Order details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update an order
      description: Update the details of an existing order.
      parameters:
        - name: orderId
          in: path
          required: true
          description: The ID of the order to update.
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderUpdateRequest'
      responses:
        '200':
          description: Order updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Order not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete an order
      description: Delete an order by its ID.
      parameters:
        - name: orderId
          in: path
          required: true
          description: The ID of the order to delete.
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Order deleted successfully.
        '404':
          description: Order not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /orders/{orderId}/status:
    patch:
      summary: Update order status
      description: Update the status of an existing order.
      parameters:
        - name: orderId
          in: path
          required: true
          description: The ID of the order to update.
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderStatusUpdateRequest'
      responses:
        '200':
          description: Order status updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Order not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Order:
      type: object
      properties:
        orderId:
          type: string
          format: uuid
          example: "a1b2c3d4-e5f6-7890-g1h2-i3j4k5l6m7n8"
        userId:
          type: string
          format: uuid
          example: "u1v2w3x4-y5z6-7890-a1b2-c3d4e5f6g7h8"
        orderDate:
          type: string
          format: date-time
          example: "2023-10-25T14:30:00Z"
        orderStatus:
          type: string
          enum: [PENDING, PROCESSING, SHIPPED, DELIVERED, CANCELLED]
          example: "PROCESSING"
        totalAmount:
          type: number
          format: float
          example: 199.99
        shippingAddress:
          type: string
          example: "123 Main St, Springfield, IL, 62704, USA"
        billingAddress:
          type: string
          example: "456 Elm St, Springfield, IL, 62704, USA"
        paymentMethod:
          type: string
          enum: [CREDIT_CARD, PAYPAL, COD]
          example: "CREDIT_CARD"
        paymentStatus:
          type: string
          enum: [PENDING, PAID, FAILED]
          example: "PAID"
        orderItems:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        trackingNumber:
          type: string
          example: "TN123456789"
        notes:
          type: string
          example: "Please deliver after 5 PM."
      required:
        - orderId
        - userId
        - orderDate
        - orderStatus
        - totalAmount
        - shippingAddress
        - billingAddress
        - paymentMethod
        - paymentStatus
        - orderItems
    OrderItem:
      type: object
      properties:
        orderItemId:
          type: string
          format: uuid
          example: "o1p2q3r4-s5t6-7890-u1v2-w3x4y5z6a7b8"
        productId:
          type: string
          format: uuid
          example: "p1q2r3s4-t5u6-7890-v1w2-x3y4z5a6b7c8"
        quantity:
          type: integer
          example: 2
        unitPrice:
          type: number
          format: float
          example: 89.99
        totalPrice:
          type: number
          format: float
          example: 179.98
        discountApplied:
          type: number
          format: float
          example: 10.00
      required:
        - orderItemId
        - productId
        - quantity
        - unitPrice
        - totalPrice
    OrderCreateRequest:
      type: object
      properties:
        userId:
          type: string
          format: uuid
          example: "u1v2w3x4-y5z6-7890-a1b2-c3d4e5f6g7h8"
        shippingAddress:
          type: string
          example: "123 Main St, Springfield, IL, 62704, USA"
        billingAddress:
          type: string
          example: "456 Elm St, Springfield, IL, 62704, USA"
        paymentMethod:
          type: string
          enum: [CREDIT_CARD, PAYPAL, COD]
          example: "CREDIT_CARD"
        orderItems:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemCreateRequest'
        notes:
          type: string
          example: "Please deliver after 5 PM."
      required:
        - userId
        - shippingAddress
        - billingAddress
        - paymentMethod
        - orderItems
    OrderItemCreateRequest:
      type: object
      properties:
        productId:
          type: string
          format: uuid
          example: "p1q2r3s4-t5u6-7890-v1w2-x3y4z5a6b7c8"
        quantity:
          type: integer
          example: 2
      required:
        - productId
        - quantity
    OrderUpdateRequest:
      type: object
      properties:
        shippingAddress:
          type: string
          example: "123 Main St, Springfield, IL, 62704, USA"
        billingAddress:
          type: string
          example: "456 Elm St, Springfield, IL, 62704, USA"
        notes:
          type: string
          example: "Please deliver after 5 PM."
      required:
        - shippingAddress
        - billingAddress
    OrderStatusUpdateRequest:
      type: object
      properties:
        orderStatus:
          type: string
          enum: [PENDING, PROCESSING, SHIPPED, DELIVERED, CANCELLED]
          example: "SHIPPED"
      required:
        - orderStatus
    Error:
      type: object
      properties:
        code:
          type: integer
          example: 404
        message:
          type: string
          example: "Order not found."
      required:
        - code
        - message